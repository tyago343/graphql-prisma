type Query {
    users(query: String) : [User!]!
    posts(query: String) : [Post!]!
    comments: [Comment!]!
    post : Post!
    me : User!
}
type Mutation {
    createUser(data: CreateUserInput) : User!
    createPost(data: CreatePostInput) : Post!
    createComment(data: CreateCommentInput) : Comment!
    deleteUser(id: ID!) : User!
    deletePost(id: ID!) : Post!
    deleteComment(id: ID!) : Comment!
    updateUser(id: ID!, data: updateUserInput) : User!
    updatePost(id: ID!, data: updatePostInput) : Post!
    updateComment(id: ID!, text: String) : Comment!
}
type Subscription {
    comment(postId: ID!): CommentSubscriptionPayload!
    post: PostSubscriptionPayload!
}
input CreateUserInput {
    name : String!,
    email : String!
    age : Int
}
input CreatePostInput {
    title : String!,
    body : String!,
    published : Boolean!,
    author : ID!
}
input CreateCommentInput {
    text : String!,
    author : ID!,
    post : ID!
}
input updateUserInput {
    name : String
    email : String
    age : Int
}
input updatePostInput {
    title : String
    body : String
    published : Boolean
}
type User {
    id : ID!
    name : String!
    email : String!
    age : Int
    posts : [Post!]!
    comments : [Comment!]!
}
type Post {
    id : ID!
    title : String!
    body : String!
    published : Boolean!
    author : User!
    comments : [Comment!]!
}
type Comment {
    id : ID!
    text : String!
    author : User!
    post : Post!

}
type PostSubscriptionPayload {
    mutation: MutationType!
    data: Post!
}
type CommentSubscriptionPayload {
    mutation: MutationType!
    data: Comment!
}

enum MutationType {
    CREATED
    UPDATED
    DELETED
}